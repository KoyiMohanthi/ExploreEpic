{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\monir\\\\Downloads\\\\explore_epic-main\\\\explore_epic-main\\\\my-project\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst express = require(\"express\");\nconst app = express();\nconst port = 3003;\nconst {\n  initializeApp,\n  cert\n} = require(\"firebase-admin/app\");\nconst {\n  getFirestore,\n  Filter\n} = require(\"firebase-admin/firestore\");\nvar serviceAccount = require(\"./serviceAccountKey.json\");\nconst bodyparser = require(\"body-parser\");\napp.use(bodyparser.json());\napp.use(bodyparser.urlencoded({\n  extended: false\n}));\nvar passwordHash = require(\"password-hash\");\ninitializeApp({\n  credential: cert(serviceAccount)\n});\nconst db = getFirestore();\napp.use(express.urlencoded({\n  extended: true\n}));\n\n// Load the JSON data from travelers.json\nconst travelersData = require('./travelers.json');\napp.set('view engine', 'ejs');\napp.use(express.static('public')); // This is for serving static files like images\n\napp.get(\"/\", (req, res) => {\n  res.render('sign_log');\n});\napp.get(\"/signup\", (req, res) => {\n  res.render(\"signup\");\n});\napp.post(\"/signinsubmit\", (req, res) => {\n  const Username = req.body.username;\n  const Email = req.body.email;\n  const Password = req.body.password;\n  db.collection(\"ExploreEpic\").where(\"Email\", \"==\", Email).get().then(emailDocs => {\n    if (!emailDocs.empty) {\n      res.send(\"Hey, an account with this email address already exists.\");\n    } else {\n      db.collection(\"ExploreEpic\").where(Filter.or(Filter.where(\"Email\", \"==\", Email), Filter.where(\"UserName\", \"==\", Username))).get().then(userDocs => {\n        if (!userDocs.empty) {\n          res.send(\"Hey, an account with this Username and Email already exists.\");\n        } else {\n          // Neither email nor username exists, so add the new account\n          db.collection(\"ExploreEpic\").add({\n            UserName: Username,\n            Email: Email,\n            Password: passwordHash.generate(Password)\n          }).then(() => {\n            console.log(Password);\n            res.render(\"signin_after\", {\n              UserName: Username\n            });\n          }).catch(() => {\n            res.send(\"Something went WRONG\");\n          });\n        }\n      });\n    }\n  });\n});\napp.get(\"/signin_after\", (req, res) => {\n  // const { UserName } = req.query.username;\n  const UserName = \"hello\";\n  res.render('signin_after', {\n    UserName\n  });\n});\napp.get(\"/signin_aftersubmit\", (req, res) => {\n  res.render('login');\n});\napp.get(\"/login\", (req, res) => {\n  res.render(\"login\");\n});\napp.post(\"/loginsubmit\", (req, res) => {\n  const Email = req.body.email;\n  const Password = req.body.password;\n  db.collection(\"ExploreEpic\").where(\"Email\", \"==\", Email).get().then(emailDocs => {\n    let verified = false;\n    emailDocs.forEach(doc => {\n      verified = passwordHash.verify(Password, doc.data().Password);\n    });\n    if (verified) {\n      res.render(\"home\");\n    } else {\n      res.render(\"login_after\");\n    }\n  }).catch(error => {\n    console.error(\"Error logging in:\", error);\n    res.send(\"Something went wrong.\");\n  });\n});\napp.get(\"/login_after\", (req, res) => {\n  res.render('login_after');\n});\napp.get(\"/home\", (req, res) => {\n  res.render(\"home\");\n});\napp.get(\"/explore\", (req, res) => {\n  res.render('explore');\n});\napp.get(\"/nearby\", (req, res) => {\n  res.render('nearby');\n});\napp.get(\"/transport\", (req, res) => {\n  res.render('transport');\n});\napp.get('/contact', (req, res) => {\n  res.render('contact');\n});\napp.get('/chikkamagaluru', (req, res) => {\n  // Retrieve the data for Chikkamangaluru from travelersData\n  const chikkamagaluruHotelsData = travelersData.chikkamagaluru;\n  res.render('chikkamagaluru', {\n    hotels: chikkamagaluruHotelsData\n  });\n});\napp.get('/coimbatore', (req, res) => {\n  // Retrieve the data for Coimbatore from travelersData\n  const coimbatoreHotelsData = travelersData.coimbatore;\n  res.render('coimbatore', {\n    hotels: coimbatoreHotelsData\n  });\n});\napp.get('/kanchi', (req, res) => {\n  // Retrieve the data for kanchi from travelersData\n  const kanchiHotelsData = travelersData.kanchi;\n  res.render('kanchi', {\n    hotels: kanchiHotelsData\n  });\n});\napp.get('/madhurai', (req, res) => {\n  // Retrieve the data for Madurai from travelersData\n  const madhuraiHotelsData = travelersData.madhurai;\n  res.render('madhurai', {\n    hotels: madhuraiHotelsData\n  });\n});\napp.get('/madikeri', (req, res) => {\n  // Retrieve the data for madikeri from travelersData\n  const madikeriHotelsData = travelersData.madikeri;\n  res.render('madikeri', {\n    hotels: madikeriHotelsData\n  });\n});\napp.get('/mysore', (req, res) => {\n  // Retrieve the data for mysore from travelersData\n  const mysoreHotelsData = travelersData.mysore;\n  res.render('mysore', {\n    hotels: mysoreHotelsData\n  });\n});\napp.get('/padmanaba', (req, res) => {\n  // Retrieve the data for padmanaba from travelersData\n  const padmanabaHotelsData = travelersData.padmanaba;\n  res.render('padmanaba', {\n    hotels: padmanabaHotelsData\n  });\n});\napp.get('/sriharikota', (req, res) => {\n  // Retrieve the data for sriharikota from travelersData\n  const sriharikotaHotelsData = travelersData.sriharikota;\n  res.render('sriharikota', {\n    hotels: sriharikotaHotelsData\n  });\n});\napp.get('/tirupati', (req, res) => {\n  // Retrieve the data for tirupati from travelersData\n  const tirupatiHotelsData = travelersData.tirupati;\n  res.render('tirupati', {\n    hotels: tirupatiHotelsData\n  });\n});\napp.get('/tirupati_restaurant', (req, res) => {\n  res.render('tirupati_restaurant');\n});\napp.get('/wayanad', (req, res) => {\n  // Retrieve the data for Wayanad from travelersData\n  const wayanadHotelsData = travelersData.wayanad;\n  res.render('wayanad', {\n    hotels: wayanadHotelsData\n  });\n});\n\n// Inside your Express app\napp.post('/reserve', (req, res) => {\n  // Extract reservation data from request body\n  const {\n    guests,\n    days,\n    checkIn,\n    checkOut\n  } = req.body;\n  // Calculate total cost (replace with your logic)\n  const totalCost = calculateTotalCost(guests, days);\n  // Store reservation details in the database (replace with your MongoDB logic)\n  // Example: \n  const reservation = new Reservation({\n    guests: guests,\n    days: days,\n    checkIn: checkIn,\n    checkOut: checkOut,\n    totalCost: totalCost\n  });\n  reservation.save((err, savedReservation) => {\n    if (err) {\n      console.error(err);\n      res.status(500).send('Error saving reservation');\n    } else {\n      res.status(200).send(savedReservation);\n    }\n  });\n});\napp.listen(port, () => {\n  console.log(`Server is running on port ${port}`);\n});\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 276,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 275,\n  columnNumber: 3\n}, this));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","map":{"version":3,"names":["React","ReactDOM","App","reportWebVitals","jsxDEV","_jsxDEV","express","require","app","port","initializeApp","cert","getFirestore","Filter","serviceAccount","bodyparser","use","json","urlencoded","extended","passwordHash","credential","db","travelersData","set","static","get","req","res","render","post","Username","body","username","Email","email","Password","password","collection","where","then","emailDocs","empty","send","or","userDocs","add","UserName","generate","console","log","catch","verified","forEach","doc","verify","data","error","chikkamagaluruHotelsData","chikkamagaluru","hotels","coimbatoreHotelsData","coimbatore","kanchiHotelsData","kanchi","madhuraiHotelsData","madhurai","madikeriHotelsData","madikeri","mysoreHotelsData","mysore","padmanabaHotelsData","padmanaba","sriharikotaHotelsData","sriharikota","tirupatiHotelsData","tirupati","wayanadHotelsData","wayanad","guests","days","checkIn","checkOut","totalCost","calculateTotalCost","reservation","Reservation","save","err","savedReservation","status","listen","root","createRoot","document","getElementById","StrictMode","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/monir/Downloads/explore_epic-main/explore_epic-main/my-project/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nconst express = require(\"express\");\nconst app = express();\nconst port = 3003;\n\nconst { initializeApp, cert } = require(\"firebase-admin/app\");\nconst { getFirestore ,Filter} = require(\"firebase-admin/firestore\");\nvar serviceAccount = require(\"./serviceAccountKey.json\");\nconst bodyparser = require(\"body-parser\");\napp.use(bodyparser.json());\n\napp.use(bodyparser.urlencoded({extended:false}));\nvar passwordHash = require(\"password-hash\");\ninitializeApp({\n  credential: cert(serviceAccount),\n});\n\nconst db = getFirestore();\napp.use(express.urlencoded({ extended: true })); \n\n// Load the JSON data from travelers.json\nconst travelersData = require('./travelers.json');\n\napp.set('view engine', 'ejs');\napp.use(express.static('public')); // This is for serving static files like images\n\napp.get(\"/\", (req, res) => {\n  res.render('sign_log');\n});\n\napp.get(\"/signup\", (req, res) => {\n  res.render(\"signup\");\n});\n\n\napp.post(\"/signinsubmit\", (req, res) => {\n  const Username = req.body.username;\n  const Email = req.body.email;\n  const Password = req.body.password;\n\n  db.collection(\"ExploreEpic\")\n    .where(\"Email\", \"==\", Email)\n    .get()\n    .then((emailDocs) => {\n      if (!emailDocs.empty) {\n        res.send(\"Hey, an account with this email address already exists.\");\n      } else {\n\n        db.collection(\"ExploreEpic\")\n          .where(\n            Filter.or(\n              Filter.where(\"Email\",\"==\",Email),\n              Filter.where(\"UserName\", \"==\", Username)\n            )\n          )\n          .get()\n          .then((userDocs) => {\n            if (!userDocs.empty) {\n              res.send(\"Hey, an account with this Username and Email already exists.\");\n            } else {\n              // Neither email nor username exists, so add the new account\n              db.collection(\"ExploreEpic\")\n                .add({\n                  UserName: Username,\n                  Email: Email,\n                  Password: passwordHash.generate(Password),\n                })\n                .then(() => {\n                  console.log(Password);\n                  res.render(\"signin_after\", { UserName: Username });\n                })\n                .catch(() => {\n                  res.send(\"Something went WRONG\");\n                });\n            }\n          });\n      }\n    });\n});\n\napp.get(\"/signin_after\", (req, res) => {\n  // const { UserName } = req.query.username;\n  const UserName=\"hello\";\n  res.render('signin_after', { UserName });\n});\n\napp.get(\"/signin_aftersubmit\",(req,res)=>{\n  res.render('login');\n});\n\napp.get(\"/login\", (req, res) => {\n  res.render(\"login\");\n});\n\n\napp.post(\"/loginsubmit\", (req, res) => {\n  const Email = req.body.email;\n  const Password = req.body.password;\n\n  db.collection(\"ExploreEpic\")\n    .where(\"Email\", \"==\", Email)\n    .get()\n    .then((emailDocs) => {\n      let verified = false;\n      emailDocs.forEach((doc) => {\n        verified = passwordHash.verify(Password, doc.data().Password); \n      });\n      if (verified) {\n        res.render(\"home\"); \n      } else {\n        res.render(\"login_after\"); \n      }\n\n    })\n    .catch((error) => {\n      console.error(\"Error logging in:\", error);\n      res.send(\"Something went wrong.\");\n    });\n});\n\n\napp.get(\"/login_after\", (req, res) => {\n  res.render('login_after');\n});\n\n\n\napp.get(\"/home\", (req, res) => {\n  res.render(\"home\");\n});\napp.get(\"/explore\", (req, res) => {\n  res.render('explore');\n});\n\napp.get(\"/nearby\", (req, res) => {\n  res.render('nearby');\n});\n\napp.get(\"/transport\", (req, res) => {\n  res.render('transport');\n});\n\napp.get('/contact',(req,res)=>{\n  res.render('contact');\n})\n\n\n\n\napp.get('/chikkamagaluru', (req, res) => {\n  // Retrieve the data for Chikkamangaluru from travelersData\n  const chikkamagaluruHotelsData = travelersData.chikkamagaluru;\n  res.render('chikkamagaluru', { hotels: chikkamagaluruHotelsData });\n});\n\n\napp.get('/coimbatore', (req, res) => {\n  // Retrieve the data for Coimbatore from travelersData\n  const coimbatoreHotelsData = travelersData.coimbatore;\n  res.render('coimbatore', { hotels: coimbatoreHotelsData });\n});\n\napp.get('/kanchi', (req, res) => {\n  // Retrieve the data for kanchi from travelersData\n  const kanchiHotelsData = travelersData.kanchi; \n  res.render('kanchi', { hotels : kanchiHotelsData});\n});\n\napp.get('/madhurai', (req, res) => {\n    // Retrieve the data for Madurai from travelersData\n    const madhuraiHotelsData = travelersData.madhurai;\n    res.render('madhurai', { hotels: madhuraiHotelsData });\n});\n\napp.get('/madikeri', (req, res) => {\n  // Retrieve the data for madikeri from travelersData\n  const madikeriHotelsData = travelersData.madikeri; \n  res.render('madikeri', { hotels : madikeriHotelsData});\n});\n\napp.get('/mysore', (req, res) => {\n  // Retrieve the data for mysore from travelersData\n  const mysoreHotelsData = travelersData.mysore; \n  res.render('mysore', { hotels : mysoreHotelsData});\n});\n\napp.get('/padmanaba', (req, res) => {\n  // Retrieve the data for padmanaba from travelersData\n  const padmanabaHotelsData = travelersData.padmanaba; \n  res.render('padmanaba', { hotels : padmanabaHotelsData});\n});\n\napp.get('/sriharikota', (req, res) => {\n  // Retrieve the data for sriharikota from travelersData\n  const sriharikotaHotelsData = travelersData.sriharikota; \n  res.render('sriharikota', { hotels : sriharikotaHotelsData});\n});\n\napp.get('/tirupati', (req, res) => {\n  // Retrieve the data for tirupati from travelersData\n  const tirupatiHotelsData = travelersData.tirupati; \n  res.render('tirupati', { hotels : tirupatiHotelsData});\n});\n\napp.get('/tirupati_restaurant', (req, res) => {\n \n  res.render('tirupati_restaurant');\n});\n\n\napp.get('/wayanad', (req, res) => {\n  // Retrieve the data for Wayanad from travelersData\n  const wayanadHotelsData = travelersData.wayanad;\n\n  res.render('wayanad', { hotels : wayanadHotelsData });\n});  \n\n\n// Inside your Express app\napp.post('/reserve', (req, res) => {\n  // Extract reservation data from request body\n  const { guests, days, checkIn, checkOut } = req.body;\n  // Calculate total cost (replace with your logic)\n  const totalCost = calculateTotalCost(guests, days);\n  // Store reservation details in the database (replace with your MongoDB logic)\n  // Example: \n  const reservation = new Reservation({\n      guests: guests,\n      days: days,\n      checkIn: checkIn,\n      checkOut: checkOut,\n      totalCost: totalCost\n  });\n  reservation.save((err, savedReservation) => {\n      if (err) {\n          console.error(err);\n          res.status(500).send('Error saving reservation');\n      } else {\n          res.status(200).send(savedReservation);\n      }\n  });\n});\n\n\napp.listen(port, () => {\n  console.log(`Server is running on port ${port}`);\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}