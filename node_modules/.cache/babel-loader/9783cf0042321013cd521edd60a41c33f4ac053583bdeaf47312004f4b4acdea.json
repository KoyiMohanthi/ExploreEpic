{"ast":null,"code":"\"use strict\";\n\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar _a, _b, _c;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IdentityPoolClient = void 0;\nconst fs = require(\"fs\");\nconst util_1 = require(\"util\");\nconst baseexternalclient_1 = require(\"./baseexternalclient\");\nconst util_2 = require(\"../util\");\n// fs.readfile is undefined in browser karma tests causing\n// `npm run browser-test` to fail as test.oauth2.ts imports this file via\n// src/index.ts.\n// Fallback to void function to avoid promisify throwing a TypeError.\nconst readFile = (0, util_1.promisify)((_a = fs.readFile) !== null && _a !== void 0 ? _a : () => {});\nconst realpath = (0, util_1.promisify)((_b = fs.realpath) !== null && _b !== void 0 ? _b : () => {});\nconst lstat = (0, util_1.promisify)((_c = fs.lstat) !== null && _c !== void 0 ? _c : () => {});\n/**\n * Defines the Url-sourced and file-sourced external account clients mainly\n * used for K8s and Azure workloads.\n */\nclass IdentityPoolClient extends baseexternalclient_1.BaseExternalAccountClient {\n  /**\n   * Instantiate an IdentityPoolClient instance using the provided JSON\n   * object loaded from an external account credentials file.\n   * An error is thrown if the credential is not a valid file-sourced or\n   * url-sourced credential or a workforce pool user project is provided\n   * with a non workforce audience.\n   * @param options The external account options object typically loaded\n   *   from the external account JSON credential file. The camelCased options\n   *   are aliases for the snake_cased options.\n   * @param additionalOptions **DEPRECATED, all options are available in the\n   *   `options` parameter.** Optional additional behavior customization options.\n   *   These currently customize expiration threshold time and whether to retry\n   *   on 401/403 API request errors.\n   */\n  constructor(options, additionalOptions) {\n    super(options, additionalOptions);\n    const opts = (0, util_2.originalOrCamelOptions)(options);\n    const credentialSource = opts.get('credential_source');\n    const credentialSourceOpts = (0, util_2.originalOrCamelOptions)(credentialSource);\n    this.file = credentialSourceOpts.get('file');\n    this.url = credentialSourceOpts.get('url');\n    this.headers = credentialSourceOpts.get('headers');\n    if (this.file && this.url) {\n      throw new Error('No valid Identity Pool \"credential_source\" provided, must be either file or url.');\n    } else if (this.file && !this.url) {\n      this.credentialSourceType = 'file';\n    } else if (!this.file && this.url) {\n      this.credentialSourceType = 'url';\n    } else {\n      throw new Error('No valid Identity Pool \"credential_source\" provided, must be either file or url.');\n    }\n    const formatOpts = (0, util_2.originalOrCamelOptions)(credentialSourceOpts.get('format'));\n    // Text is the default format type.\n    this.formatType = formatOpts.get('type') || 'text';\n    this.formatSubjectTokenFieldName = formatOpts.get('subject_token_field_name');\n    if (this.formatType !== 'json' && this.formatType !== 'text') {\n      throw new Error(`Invalid credential_source format \"${this.formatType}\"`);\n    }\n    if (this.formatType === 'json' && !this.formatSubjectTokenFieldName) {\n      throw new Error('Missing subject_token_field_name for JSON credential_source format');\n    }\n  }\n  /**\n   * Triggered when a external subject token is needed to be exchanged for a GCP\n   * access token via GCP STS endpoint.\n   * This uses the `options.credential_source` object to figure out how\n   * to retrieve the token using the current environment. In this case,\n   * this either retrieves the local credential from a file location (k8s\n   * workload) or by sending a GET request to a local metadata server (Azure\n   * workloads).\n   * @return A promise that resolves with the external subject token.\n   */\n  async retrieveSubjectToken() {\n    if (this.file) {\n      return await this.getTokenFromFile(this.file, this.formatType, this.formatSubjectTokenFieldName);\n    }\n    return await this.getTokenFromUrl(this.url, this.formatType, this.formatSubjectTokenFieldName, this.headers);\n  }\n  /**\n   * Looks up the external subject token in the file path provided and\n   * resolves with that token.\n   * @param file The file path where the external credential is located.\n   * @param formatType The token file or URL response type (JSON or text).\n   * @param formatSubjectTokenFieldName For JSON response types, this is the\n   *   subject_token field name. For Azure, this is access_token. For text\n   *   response types, this is ignored.\n   * @return A promise that resolves with the external subject token.\n   */\n  async getTokenFromFile(filePath, formatType, formatSubjectTokenFieldName) {\n    // Make sure there is a file at the path. lstatSync will throw if there is\n    // nothing there.\n    try {\n      // Resolve path to actual file in case of symlink. Expect a thrown error\n      // if not resolvable.\n      filePath = await realpath(filePath);\n      if (!(await lstat(filePath)).isFile()) {\n        throw new Error();\n      }\n    } catch (err) {\n      if (err instanceof Error) {\n        err.message = `The file at ${filePath} does not exist, or it is not a file. ${err.message}`;\n      }\n      throw err;\n    }\n    let subjectToken;\n    const rawText = await readFile(filePath, {\n      encoding: 'utf8'\n    });\n    if (formatType === 'text') {\n      subjectToken = rawText;\n    } else if (formatType === 'json' && formatSubjectTokenFieldName) {\n      const json = JSON.parse(rawText);\n      subjectToken = json[formatSubjectTokenFieldName];\n    }\n    if (!subjectToken) {\n      throw new Error('Unable to parse the subject_token from the credential_source file');\n    }\n    return subjectToken;\n  }\n  /**\n   * Sends a GET request to the URL provided and resolves with the returned\n   * external subject token.\n   * @param url The URL to call to retrieve the subject token. This is typically\n   *   a local metadata server.\n   * @param formatType The token file or URL response type (JSON or text).\n   * @param formatSubjectTokenFieldName For JSON response types, this is the\n   *   subject_token field name. For Azure, this is access_token. For text\n   *   response types, this is ignored.\n   * @param headers The optional additional headers to send with the request to\n   *   the metadata server url.\n   * @return A promise that resolves with the external subject token.\n   */\n  async getTokenFromUrl(url, formatType, formatSubjectTokenFieldName, headers) {\n    const opts = {\n      url,\n      method: 'GET',\n      headers,\n      responseType: formatType\n    };\n    let subjectToken;\n    if (formatType === 'text') {\n      const response = await this.transporter.request(opts);\n      subjectToken = response.data;\n    } else if (formatType === 'json' && formatSubjectTokenFieldName) {\n      const response = await this.transporter.request(opts);\n      subjectToken = response.data[formatSubjectTokenFieldName];\n    }\n    if (!subjectToken) {\n      throw new Error('Unable to parse the subject_token from the credential_source URL');\n    }\n    return subjectToken;\n  }\n}\nexports.IdentityPoolClient = IdentityPoolClient;","map":{"version":3,"names":["_a","_b","_c","Object","defineProperty","exports","value","IdentityPoolClient","fs","require","util_1","baseexternalclient_1","util_2","readFile","promisify","realpath","lstat","BaseExternalAccountClient","constructor","options","additionalOptions","opts","originalOrCamelOptions","credentialSource","get","credentialSourceOpts","file","url","headers","Error","credentialSourceType","formatOpts","formatType","formatSubjectTokenFieldName","retrieveSubjectToken","getTokenFromFile","getTokenFromUrl","filePath","isFile","err","message","subjectToken","rawText","encoding","json","JSON","parse","method","responseType","response","transporter","request","data"],"sources":["C:/Users/monir/node_modules/google-auth-library/build/src/auth/identitypoolclient.js"],"sourcesContent":["\"use strict\";\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar _a, _b, _c;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IdentityPoolClient = void 0;\nconst fs = require(\"fs\");\nconst util_1 = require(\"util\");\nconst baseexternalclient_1 = require(\"./baseexternalclient\");\nconst util_2 = require(\"../util\");\n// fs.readfile is undefined in browser karma tests causing\n// `npm run browser-test` to fail as test.oauth2.ts imports this file via\n// src/index.ts.\n// Fallback to void function to avoid promisify throwing a TypeError.\nconst readFile = (0, util_1.promisify)((_a = fs.readFile) !== null && _a !== void 0 ? _a : (() => { }));\nconst realpath = (0, util_1.promisify)((_b = fs.realpath) !== null && _b !== void 0 ? _b : (() => { }));\nconst lstat = (0, util_1.promisify)((_c = fs.lstat) !== null && _c !== void 0 ? _c : (() => { }));\n/**\n * Defines the Url-sourced and file-sourced external account clients mainly\n * used for K8s and Azure workloads.\n */\nclass IdentityPoolClient extends baseexternalclient_1.BaseExternalAccountClient {\n    /**\n     * Instantiate an IdentityPoolClient instance using the provided JSON\n     * object loaded from an external account credentials file.\n     * An error is thrown if the credential is not a valid file-sourced or\n     * url-sourced credential or a workforce pool user project is provided\n     * with a non workforce audience.\n     * @param options The external account options object typically loaded\n     *   from the external account JSON credential file. The camelCased options\n     *   are aliases for the snake_cased options.\n     * @param additionalOptions **DEPRECATED, all options are available in the\n     *   `options` parameter.** Optional additional behavior customization options.\n     *   These currently customize expiration threshold time and whether to retry\n     *   on 401/403 API request errors.\n     */\n    constructor(options, additionalOptions) {\n        super(options, additionalOptions);\n        const opts = (0, util_2.originalOrCamelOptions)(options);\n        const credentialSource = opts.get('credential_source');\n        const credentialSourceOpts = (0, util_2.originalOrCamelOptions)(credentialSource);\n        this.file = credentialSourceOpts.get('file');\n        this.url = credentialSourceOpts.get('url');\n        this.headers = credentialSourceOpts.get('headers');\n        if (this.file && this.url) {\n            throw new Error('No valid Identity Pool \"credential_source\" provided, must be either file or url.');\n        }\n        else if (this.file && !this.url) {\n            this.credentialSourceType = 'file';\n        }\n        else if (!this.file && this.url) {\n            this.credentialSourceType = 'url';\n        }\n        else {\n            throw new Error('No valid Identity Pool \"credential_source\" provided, must be either file or url.');\n        }\n        const formatOpts = (0, util_2.originalOrCamelOptions)(credentialSourceOpts.get('format'));\n        // Text is the default format type.\n        this.formatType = formatOpts.get('type') || 'text';\n        this.formatSubjectTokenFieldName = formatOpts.get('subject_token_field_name');\n        if (this.formatType !== 'json' && this.formatType !== 'text') {\n            throw new Error(`Invalid credential_source format \"${this.formatType}\"`);\n        }\n        if (this.formatType === 'json' && !this.formatSubjectTokenFieldName) {\n            throw new Error('Missing subject_token_field_name for JSON credential_source format');\n        }\n    }\n    /**\n     * Triggered when a external subject token is needed to be exchanged for a GCP\n     * access token via GCP STS endpoint.\n     * This uses the `options.credential_source` object to figure out how\n     * to retrieve the token using the current environment. In this case,\n     * this either retrieves the local credential from a file location (k8s\n     * workload) or by sending a GET request to a local metadata server (Azure\n     * workloads).\n     * @return A promise that resolves with the external subject token.\n     */\n    async retrieveSubjectToken() {\n        if (this.file) {\n            return await this.getTokenFromFile(this.file, this.formatType, this.formatSubjectTokenFieldName);\n        }\n        return await this.getTokenFromUrl(this.url, this.formatType, this.formatSubjectTokenFieldName, this.headers);\n    }\n    /**\n     * Looks up the external subject token in the file path provided and\n     * resolves with that token.\n     * @param file The file path where the external credential is located.\n     * @param formatType The token file or URL response type (JSON or text).\n     * @param formatSubjectTokenFieldName For JSON response types, this is the\n     *   subject_token field name. For Azure, this is access_token. For text\n     *   response types, this is ignored.\n     * @return A promise that resolves with the external subject token.\n     */\n    async getTokenFromFile(filePath, formatType, formatSubjectTokenFieldName) {\n        // Make sure there is a file at the path. lstatSync will throw if there is\n        // nothing there.\n        try {\n            // Resolve path to actual file in case of symlink. Expect a thrown error\n            // if not resolvable.\n            filePath = await realpath(filePath);\n            if (!(await lstat(filePath)).isFile()) {\n                throw new Error();\n            }\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                err.message = `The file at ${filePath} does not exist, or it is not a file. ${err.message}`;\n            }\n            throw err;\n        }\n        let subjectToken;\n        const rawText = await readFile(filePath, { encoding: 'utf8' });\n        if (formatType === 'text') {\n            subjectToken = rawText;\n        }\n        else if (formatType === 'json' && formatSubjectTokenFieldName) {\n            const json = JSON.parse(rawText);\n            subjectToken = json[formatSubjectTokenFieldName];\n        }\n        if (!subjectToken) {\n            throw new Error('Unable to parse the subject_token from the credential_source file');\n        }\n        return subjectToken;\n    }\n    /**\n     * Sends a GET request to the URL provided and resolves with the returned\n     * external subject token.\n     * @param url The URL to call to retrieve the subject token. This is typically\n     *   a local metadata server.\n     * @param formatType The token file or URL response type (JSON or text).\n     * @param formatSubjectTokenFieldName For JSON response types, this is the\n     *   subject_token field name. For Azure, this is access_token. For text\n     *   response types, this is ignored.\n     * @param headers The optional additional headers to send with the request to\n     *   the metadata server url.\n     * @return A promise that resolves with the external subject token.\n     */\n    async getTokenFromUrl(url, formatType, formatSubjectTokenFieldName, headers) {\n        const opts = {\n            url,\n            method: 'GET',\n            headers,\n            responseType: formatType,\n        };\n        let subjectToken;\n        if (formatType === 'text') {\n            const response = await this.transporter.request(opts);\n            subjectToken = response.data;\n        }\n        else if (formatType === 'json' && formatSubjectTokenFieldName) {\n            const response = await this.transporter.request(opts);\n            subjectToken = response.data[formatSubjectTokenFieldName];\n        }\n        if (!subjectToken) {\n            throw new Error('Unable to parse the subject_token from the credential_source URL');\n        }\n        return subjectToken;\n    }\n}\nexports.IdentityPoolClient = IdentityPoolClient;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}